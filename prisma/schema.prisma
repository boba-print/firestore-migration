generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DATABASE_URL")
}

model CardTransactions {
  CardTransactionID String              @id @db.VarChar(45)
  CreatedAt         DateTime            @db.DateTime(0)
  Amount            Int
  CanceledAmount    Int
  CanceledAt        DateTime?           @db.DateTime(0)
  RejectedReason    String?             @db.VarChar(100)
  CardID            String?             @db.VarChar(64)
  IamportUID        String              @db.VarChar(45)
  ReceiptURL        String              @db.VarChar(300)
  UserID            String              @db.VarChar(45)
  Cards             Cards?              @relation(fields: [CardID], references: [CardID], onDelete: NoAction, onUpdate: NoAction, map: "FK_CardTransactions_Cards")
  Users             Users               @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_CardTransactions_Users")
  PointTransactions PointTransactions[]
  PrintOrders       PrintOrders[]

  @@index([CardID], map: "FK_CardTransactions_Cards_idx")
  @@index([UserID], map: "FK_CardTransactions_Users_idx")
}

model Cards {
  CardID           String             @id @db.VarChar(64)
  CreatedAt        DateTime           @db.DateTime(0)
  ModifiedAt       DateTime           @db.DateTime(0)
  IsDeleted        Int
  CheckSum         String             @db.VarChar(45)
  RejectionMessage String?            @db.VarChar(45)
  MaskedNumber     String             @db.VarChar(45)
  Priority         Int
  VendorCode       String             @db.VarChar(45)
  BillingKey       String             @db.VarChar(45)
  UserID           String             @db.VarChar(45)
  Users            Users              @relation(fields: [UserID], references: [UserID], onUpdate: Restrict, map: "FK_Cards_Users")
  CardTransactions CardTransactions[]

  @@index([UserID], map: "FK_Cards_Users_idx")
}

model Files {
  FileID          String          @id @db.VarChar(64)
  CreatedAt       DateTime        @db.DateTime(0)
  ModifiedAt      DateTime        @db.DateTime(0)
  IsDeleted       Int
  OriginalGSPath  String          @db.VarChar(300)
  OriginalName    String          @db.VarChar(400)
  ViewName        String          @db.VarChar(400)
  Size            Int
  UserID          String          @db.VarChar(45)
  FileConvertedID String?         @db.VarChar(64)
  ErrorType       String?         @db.VarChar(45)
  FilesConverted  FilesConverted? @relation(fields: [FileConvertedID], references: [FileConvertedID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Files_FilesConverted")
  Users           Users           @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Files_Users")
  PrintJobs       PrintJobs[]

  @@index([FileConvertedID], map: "FK_Files_FilesConverted_idx")
  @@index([UserID], map: "FK_Files_Users_idx")
}

model FilesConverted {
  FileConvertedID     String   @id @db.VarChar(64)
  CreatedAt           DateTime @db.DateTime(0)
  Orientation         String   @db.VarChar(45)
  NumPages            Int
  ThumbnailsGSPath    String   @db.VarChar(300)
  ConvertedFileGSPath String   @db.VarChar(300)
  UserID              String   @db.VarChar(45)
  Users               Users    @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_FilesConverted_Users")
  Files               Files[]

  @@index([UserID], map: "FK_FilesConverted_Users_idx")
}

model Kiosks {
  KioskID                 String                 @id @db.VarChar(45)
  CreatedAt               DateTime               @db.DateTime(0)
  ModifiedAt              DateTime               @db.DateTime(0)
  IsDeleted               Int
  Address                 String                 @db.VarChar(45)
  Latitude                Float
  Longitude               Float
  BuildingCode            String                 @db.VarChar(45)
  LastConnectedAt         DateTime?              @db.DateTime(0)
  MaintenancePasscode     String                 @db.VarChar(10)
  Description             String                 @db.VarChar(800)
  Group                   String                 @db.VarChar(100)
  ImageUrl                String?                @db.VarChar(400)
  IsDuplexPrintable       Int
  MerchantID              String                 @db.VarChar(64)
  Name                    String                 @db.VarChar(45)
  PriceA4Mono             Int?
  PriceA4Color            Int?
  BannerCustomHTML        String?                @db.MediumText
  Status                  String                 @db.VarChar(45)
  Notice                  String?                @db.VarChar(100)
  WorkHour                String                 @db.VarChar(45)
  PaperTrayCapacity       Int                    @db.UnsignedInt
  NumRemainPaper          Int                    @db.UnsignedInt
  CurrentViewPage         String?                @db.VarChar(45)
  Version                 String?                @db.VarChar(45)
  Memo                    String?                @db.VarChar(400)
  KioskMaintenanceGroupID String                 @db.VarChar(64)
  KioskMaintenanceGroups  KioskMaintenanceGroups @relation(fields: [KioskMaintenanceGroupID], references: [KioskMaintenanceGroupID], onDelete: NoAction, onUpdate: NoAction, map: "Kiosks_FK")
  Merchants               Merchants              @relation(fields: [MerchantID], references: [MerchantID], onUpdate: Restrict, map: "Kiosks_FK_1")
  PrintJobs               PrintJobs[]
  PrintOrders             PrintOrders[]

  @@index([KioskMaintenanceGroupID], map: "Kiosks_FK")
  @@index([MerchantID], map: "Kiosks_FK_1")
}

model PointTransactions {
  PointTransactionID String            @id @db.VarChar(64)
  CreatedAt          DateTime          @db.DateTime(0)
  CardTransactionID  String?           @db.VarChar(45)
  Context            String            @db.VarChar(45)
  UserID             String            @db.VarChar(45)
  PointChanged       Int
  CanceledAmount     Int
  CanceledAt         DateTime?         @db.DateTime(0)
  RemainingPoint     Int
  CardTransactions   CardTransactions? @relation(fields: [CardTransactionID], references: [CardTransactionID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PointTransactions_CardTransactions")
  Users              Users             @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PointTransactions_Users")
  PrintOrders        PrintOrders[]

  @@index([CardTransactionID], map: "FK_PointTransactions_CardTransactions_idx")
  @@index([UserID], map: "FK_PointTransactions_Users_idx")
}

model PrintJobs {
  PrintJobID          String                @id @db.VarChar(40)
  CreatedAt           DateTime              @db.DateTime(0)
  ModifiedAt          DateTime              @db.DateTime(0)
  IsDeleted           Int
  KioskID             String                @db.VarChar(45)
  UserID              String                @db.VarChar(45)
  FileID              String                @db.VarChar(64)
  NumPrintPages       Int?                  @db.UnsignedInt
  VerificationNumber  String                @db.VarChar(10)
  NumCopies           Int                   @db.UnsignedInt
  PageFitting         String                @db.VarChar(20)
  Duplex              String                @db.VarChar(20)
  NUp                 Int
  LayoutOrder         String                @db.VarChar(20)
  PaperOrientation    String                @db.VarChar(20)
  IsColor             Int
  PageRanges          String                @db.VarChar(100)
  Files               Files                 @relation(fields: [FileID], references: [FileID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintJobs_Files")
  Kiosks              Kiosks                @relation(fields: [KioskID], references: [KioskID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintJobs_Kiosks")
  Users               Users                 @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintJobs_Users")
  PrintOrder_PrintJob PrintOrder_PrintJob[]

  @@index([FileID], map: "FK_PrintJobs_Files_idx")
  @@index([KioskID], map: "FK_PrintJobs_Kiosks_idx")
  @@index([UserID], map: "FK_PrintJobs_Users_idx")
}

model PrintOrder_PrintJob {
  PrintOrderID String      @db.VarChar(64)
  PrintJobID   String      @db.VarChar(45)
  PrintJobs    PrintJobs   @relation(fields: [PrintJobID], references: [PrintJobID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintOrders_PrintJobs")
  PrintOrders  PrintOrders @relation(fields: [PrintOrderID], references: [PrintOrderID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintJobs_PrintOrders")

  @@unique([PrintOrderID, PrintJobID], map: "CompositeKey")
  @@index([PrintOrderID], map: "FK_PrintJobs_PrintOrders_idx")
  @@index([PrintJobID], map: "FK_PrintOrders_PrintJobs_idx")
}

model PrintOrders {
  PrintOrderID        String                @id @db.VarChar(64)
  CreatedAt           DateTime              @db.DateTime(0)
  ModifiedAt          DateTime              @db.DateTime(0)
  IsDeleted           Int
  PointTransactionID  String?               @db.VarChar(64)
  CardTransactionID   String?               @db.VarChar(45)
  KioskID             String                @db.VarChar(45)
  Status              String                @db.VarChar(45)
  UserID              String                @db.VarChar(45)
  CardTransactions    CardTransactions?     @relation(fields: [CardTransactionID], references: [CardTransactionID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintOrders_CardTransactions")
  Kiosks              Kiosks                @relation(fields: [KioskID], references: [KioskID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintOrders_Kiosks")
  PointTransactions   PointTransactions?    @relation(fields: [PointTransactionID], references: [PointTransactionID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintOrders_PointTransactions")
  Users               Users                 @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PrintOrders_Users")
  PrintOrder_PrintJob PrintOrder_PrintJob[]

  @@index([CardTransactionID], map: "FK_PrintOrders_CardTransactions_idx")
  @@index([KioskID], map: "FK_PrintOrders_Kiosks_idx")
  @@index([PointTransactionID], map: "FK_PrintOrders_PointTransactions_idx")
  @@index([UserID], map: "FK_PrintOrders_Users_idx")
}

model Users {
  UserID            String              @id @db.VarChar(40)
  CreatedAt         DateTime            @db.DateTime(0)
  ModifiedAt        DateTime            @db.DateTime(0)
  IsDeleted         Int
  Email             String              @db.VarChar(100)
  CheckedNoticeAt   DateTime?           @db.DateTime(0)
  LastVisitedAt     DateTime?           @db.DateTime(0)
  IsDisabled        Int
  Name              String              @db.VarChar(45)
  PhoneNumber       String              @db.VarChar(45)
  Points            Int
  StorageAllocated  BigInt              @db.UnsignedBigInt
  StorageUsed       BigInt              @db.UnsignedBigInt
  CardTransactions  CardTransactions[]
  Cards             Cards[]
  Files             Files[]
  FilesConverted    FilesConverted[]
  PointTransactions PointTransactions[]
  PrintJobs         PrintJobs[]
  PrintOrders       PrintOrders[]
}

model Merchants {
  MerchantID             String                   @id @db.VarChar(64)
  Company                String                   @db.VarChar(100)
  Representative         String                   @db.VarChar(20)
  PhoneNumber            String                   @db.VarChar(50)
  Description            String?                  @db.VarChar(100)
  KioskMaintenanceGroups KioskMaintenanceGroups[]
  Kiosks                 Kiosks[]
}

model KioskMaintenanceGroups {
  KioskMaintenanceGroupID String    @id @db.VarChar(64)
  Name                    String    @db.VarChar(100)
  Description             String    @db.VarChar(100)
  MerchantID              String    @db.VarChar(64)
  Merchants               Merchants @relation(fields: [MerchantID], references: [MerchantID], onDelete: NoAction, onUpdate: NoAction, map: "KioskMaintenanceGroups_FK")
  Kiosks                  Kiosks[]

  @@index([MerchantID], map: "KioskMaintenanceGroups_FK")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_group_permissions     auth_group_permissions[]
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.DateTime(6)
  is_superuser               Boolean
  username                   String                       @unique(map: "username") @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.DateTime(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.DateTime(6)
  object_id           String?              @db.LongText
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.UnsignedSmallInt
  change_message      String               @db.LongText
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.DateTime(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String   @db.LongText
  expire_date  DateTime @db.DateTime(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
}
